프롬프트
=========

**LLM의 입력은 언제나 프롬프트 메시지입니다.** 챗 히스토리, 도구나 RAG 모두 결국 프롬프트로 변환되어 LLM과 소통하게 됩니다.
프롬프트는 사용자가 원하는 방향으로 언어 모델이 응답하도록 유도하기 위해 제공되는 **지시 사항**\이나 **문맥**\입니다.
프롬프트는 메시지들로 이루어져 있으며, 메시지는 아래 유형 중 하나입니다.


메시지 유형
------------

프롬프트는 다음 유형의 메시지들로 이루어져 있습니다.

- System 메시지: 모델이 어떻게 행동해야 하는지 지시합니다. 또는 페르소나를 지정합니다(당신은 대한민국의 대통령입니다).
- AI 메시지: 모델이 생성한 메시지입니다. 사용자는 AI가 응답해야 한다고 지시할 수 있습니다. 도구를 호출에 관한 정보를 담을 수도 있습니다.
- Human 메시지: 사용자가 생성한 메시지입니다.

.. warning::
    모든 모델이 System 메시지 유형을 지원하는 것은 아닙니다.

.. note::
    Tool 메시지가 프롬프트에 포함될 필요가 있는지 논의가 필요합니다.


프롬프팅 기술
------------

프롬프트에 다음과 같은 테크닉을 사용할 수 있습니다.

Zero-Shot Learning
~~~~~~~~~~~~~~~~~~~~

이미 LLM은 대량의 데이터로 학습이 된 상태입니다.
여기서 아무런 예제를 주지 않고도 LLM이 원하는 방향으로 응답을 하도록 유도하는 것을 제로 샷 러닝이라고 합니다.

------------

:질의:
   *텍스트를 중립, 부정 또는 긍정으로 분류합니다.*

   *텍스트: 휴가는 괜찮을 것 같아요.*

   *감정:*

:답변:
   **중립**


Few-Shot Learning
~~~~~~~~~~~~~~~~~~~

LLM은 그 자체만으로 제로 샷에서 뛰어난 성능을 보여줍니다. 하지만 복잡한 작업에서는 개선이 필요합니다.
퓨 샷 프롬프팅에서는 예제를 주어서 LLM이 더 나은 응답을 하도록 유도합니다.

------------


:질의:
   *"whatpu"는 탄자니아에 서식하는 작은 털복숭이 동물입니다. 다음은 whatpu를 사용하는 문장의 예입니다:*

   *우리는 아프리카를 여행하고 있었는데 아주 귀여운 whatpu를 보았습니다.*

   *"farduddle"을 한다는 것은 정말 빠르게 위아래로 점프한다는 뜻입니다. 다음은 farduddle을 사용하는 문장의 예입니다:*

:답변:
   **게임에서 이겼을 때 우리 모두는 farduddle를 시작했습니다.**


CoT (Chain of Thought)
~~~~~~~~~~~~~~~~~~~~~~~~~~

중간 추론 단계를 프롬프트에 넣어 LLM이 복잡한 추론을 하는데 도움을 줍니다.

------------

:질의:
   *집합 {4, 8, 9, 15, 12, 2, 1}에서 홀수를 모두 더하면 짝수야.*

   *답변: 홀수(9, 15, 1)를 모두 더하면 25가 돼. 위의 명제는 거짓이야.*

   *집합 {17, 10, 19, 4, 8, 12, 24}에서 홀수를 모두 더하면 짝수야.*

   *답변: 홀수(17, 19)를 모두 더하면 36이 돼. 위의 명제는 참이야.*

   *집합 {16, 11, 14, 4, 8, 13, 24}에서 홀수를 모두 더하면 짝수야.*

   *답변: 홀수(11, 13)를 모두 더하면 24가 돼. 위의 명제는 참이야.*

   *집합 {17, 9, 10, 12, 13, 4, 2}에서 홀수를 모두 더하면 짝수야.*

   *답변: 홀수(17, 9, 13)를 모두 더하면 39가 돼. 위의 명제는 거짓이야.*

   *집합 {15, 32, 5, 13, 82, 7, 1}에서 홀수를 모두 더하면 짝수야.*

   *답변:

:답변:
   **홀수(15, 5, 13, 7, 1)를 모두 더하면 41이 돼. 위의 명제는 거짓이야.**


| 출처: 프롬프트 엔지니어링 가이드 <https://www.promptingguide.ai/kr>

변수
-------

메시지는 변수를 포함할 수 있습니다. 변수는 중괄호로 둘러싸인 이름으로 표시됩니다. 예를 들어, {name}은 name이라는 변수를 나타냅니다.

변수는 하나의 메시지가 아닌 **하나의 프롬프트 내에서 유일**\합니다.
이는 특정 변수명을 한 곳에서만 사용할 수 있다는 의미는 아닙니다.
대신 동일한 변수 이름을 여러 곳에서 사용하더라도 동일한 변수로 취급된다고 보면 됩니다.

프롬프트를 사용할 때 변수는 사용자가 입력한 값으로 대체됩니다.
예를 들어 사용자가 "My name is {name}. You can call me {name}."이라고 입력하고,
name 변수에 "John"을 입력하면 "My name is John. You can call me John."이라는 메시지가 생성됩니다.

프롬프트의 사용
---------------

**프롬프트는 대화나 에이전트를 생성할 때 포함**\될 수 있습니다. 대화나 에이전트는 **여러 개의 프롬프트를 포함**\할 수 있습니다.
프롬프트를 하나의 사전 지식이나 문맥이라고 봤을 때 여러 사전 지식으로 이루어진 프롬프트의 생성을 위해 다중 프롬프트가 필요합니다.
특히 Few Shot Learning과 같은 작업을 지원하기 위해 **동일한 프롬프트가 하나의 대화나 에이전트에 여러번 포함**\될 수 있습니다.

.. note::
    프롬프트가 프롬프트를 포함하는 중첩 기능도 추후에 필요합니다.

프롬프트의 수정과 삭제
---------------

이미 사용 중인 프롬프트를 수정하거나 삭제하더라도 **기존 대화와 에이전트는 영향을 받지 않아야** 합니다. 따라서 대화나 에이전트에 포함된 프롬프트와
변수 값은 대화와 에이전트마다 별도로 저장되어야 합니다.

